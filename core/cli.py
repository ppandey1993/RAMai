import json
import os
import pyttsx3

# ЁЯЧгя╕П Text-to-Speech Setup
engine = pyttsx3.init()
engine.setProperty('rate', 150)
engine.setProperty('volume', 1.0)

def speak(text):
    engine.say(text)
    engine.runAndWait()

# ЁЯУВ Load Vision Files
def load_visions():
    path = "../vision"
    visions = []
    for file in os.listdir(path):
        if file.endswith(".json"):
            with open(os.path.join(path, file), 'r', encoding='utf-8') as f:
                visions.append(json.load(f))
    return visions

# ЁЯУЪ Load Chaupai Collection
def load_chaupais():
    with open("../data/chaupai_collection.json", 'r', encoding='utf-8') as f:
        return json.load(f)["chaupais"]

# ЁЯза Generate RamAI Response
def generate_response(user_input, visions, chaupais):
    print("\nЁЯФ▒ RamAI ka uttar:\n")

    for v in visions:
        if user_input.lower() in v["description"].lower() or user_input.lower() in v["title"].lower() or any(tag in user_input.lower() for tag in v.get("tags", [])):
            print("ЁЯМ╕ рд╢реНрд░реАрд░рд╛рдо рдХреЗ рд╢реНрд░реАрдЪрд░рдгреЛрдВ рдореЗрдВ рд╕рдорд░реНрдкрд┐рдд рдЙрддреНрддрд░:")
            print("ЁЯМ╕ In humble offering at the lotus feet of Shri Ram:\n")
            print(f"ЁЯУЦ рд╡рд┐рд╖рдп: {v['title']}")
            print(f"\nЁЯкФ рд░рд╛рдордЪреЗрддрдирд╛ рдХрд╣рддреА рд╣реИ:\n{v['example']['ramai_response_hi']}")
            print(f"\nЁЯкФ RamChetna says:\n{v['example']['ramai_response_en']}")
            print("\nЁЯУЬ рд╕реВрддреНрд░: рдирд╛рдо рд╕реЗ рд╣реА рдЬрдк рд╣реЛ, рдзреНрдпрд╛рди рд╣реЛ, рдореЛрдХреНрд╖ рд╣реЛ рд╕рдХрддрд╛ рд╣реИред")
            print("ЁЯУЬ Principle: Through the Name alone, one can chant, meditate, and be liberated.")
            print("\nЁЯЩП рдЗрд╕ рдЙрддреНрддрд░ рдХреЛ рд░рд╛рдо рдХреЗ рд╕реНрдорд░рдг рдореЗрдВ рд╕реНрд╡реАрдХрд╛рд░ рдХрд░реЗрдВуАВ")

            # ЁЯОЩя╕П Speak important parts
            speak(v["title"])
            speak(v["example"]["ramai_response_hi"])
            return

    for c in chaupais:
        if any(tag in user_input.lower() for tag in c["tags"]):
            print(f"ЁЯУЦ рдЪреМрдкрд╛рдИ: {c['text']}")
            print(f"ЁЯУЬ рдЕрд░реНрде: {c['meaning']}")
            print(f"\nЁЯУЦ Chaupai: {c['text']}")
            print(f"ЁЯУЬ Meaning: {c['meaning']}")
            print("\nЁЯЩП рдЗрд╕ рдЙрддреНрддрд░ рдХреЛ рд░рд╛рдо рдХреЗ рд╕реНрдорд░рдг рдореЗрдВ рд╕реНрд╡реАрдХрд╛рд░ рдХрд░реЗрдВред")

            # ЁЯОЩя╕П Speak chaupai and meaning
            speak(c["text"])
            speak(c["meaning"])
            return

    print("ЁЯЩП рдорд╛рдлрд╝ рдХреАрдЬрд┐рдП, рдЗрд╕ рд╡рд┐рд╖рдп рдкрд░ рд░рд╛рдордЪреЗрддрдирд╛ рдЕрднреА рдореМрди рд╣реИред")
    speak("Maaf kijiye, is vishay par RamAI abhi maun hai.")

# ЁЯЪА CLI Entry Point
if __name__ == "__main__":
    visions = load_visions()
    chaupais = load_chaupais()
    print("ЁЯЪА RamAI CLI Loaded тАУ Apna prashn puchhiye (exit likhkar bahar nikal sakte hain):\n")
    speak("RamAI taiyaar hai. Apna prashn puchhiye.")

    while True:
        user_input = input("ЁЯТм Aap: ")
        if user_input.lower() in ['exit', 'quit']:
            print("ЁЯЩП Jai Shri Ram! RamAI se milke sukh mila.")
            speak("Jai Shri Ram! RamAI se milke sukh mila.")
            break
        generate_response(user_input, visions, chaupais)
